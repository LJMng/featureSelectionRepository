package featureSelection.tester.procedure.heuristic.activeSampleSelection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import common.utils.CollectionUtils;
import featureSelection.basic.annotation.theory.RoughSet;
import featureSelection.basic.annotation.thread.ThreadSafetyNotSecured;
import featureSelection.basic.lang.dataStructure.IntArrayKey;
import featureSelection.basic.lang.dataStructure.impl.integerIterator.IntegerArrayIterator;
import featureSelection.basic.model.universe.instance.Instance;
import featureSelection.basic.procedure.ProcedureComponent;
import featureSelection.basic.procedure.component.TimeCountedProcedureComponent;
import featureSelection.basic.procedure.container.DefaultProcedureContainer;
import featureSelection.basic.procedure.parameter.ProcedureParameters;
import featureSelection.basic.procedure.report.ReportMapGenerated;
import featureSelection.basic.procedure.statistics.Statistics;
import featureSelection.basic.procedure.statistics.StatisticsCalculated;
import featureSelection.basic.procedure.timer.TimeCounted;
import featureSelection.basic.procedure.timer.TimeSum;
import featureSelection.basic.procedure.timer.TimerUtils;
import featureSelection.basic.support.alg.ActiveSamplePairSelectionStrategy;
import featureSelection.basic.support.calculation.Calculation;
import featureSelection.basic.support.reductMiningStrategy.heuristic.QuickReductHeuristicReductStrategy;
import featureSelection.basic.support.searchStrategy.HashSearchStrategy;
import featureSelection.repository.algorithm.alg.activeSampleSelection.ActiveSampleSelectionAlgorithm;
import featureSelection.repository.entity.alg.activeSampleSelection.EquivalenceClass;
import featureSelection.repository.entity.alg.activeSampleSelection.incrementalAttributeReductionResult.ASSResult4Incremental;
import featureSelection.repository.entity.alg.activeSampleSelection.incrementalAttributeReductionResult.ActiveSampleSelectionResult;
import featureSelection.tester.procedure.ComponentTags;
import featureSelection.tester.procedure.heuristic.activeSampleSelection.procedure.IncrementalUpdatingProcedureContainer;
import featureSelection.tester.procedure.param.ParameterConstants;
import featureSelection.tester.statistics.StatisticsConstants;
import featureSelection.tester.statistics.info.execInstance.BasicExecutionInstanceInfo;
import featureSelection.tester.utils.ProcedureUtils;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

/**
 * Tester Procedure for <strong>Active Sample Selection (ASS)</strong> based Attribute
 * Reduction(for <strong>Dynamic incremental Data</strong>).
 * <p>
 * Original paper: <a href="https://ieeexplore.ieee.org/document/7492272">
 * "Active Sample Selection Based Incremental Algorithm for Attribute Reduction With
 * Rough Sets"</a> by Yanyan Yang, Degang Chen, Hui Wang.
 * <p>
 * This is a {@link DefaultProcedureContainer}. Procedure contains 2
 * {@link ProcedureComponent}s, refer to steps:
 * <ul>
 * 	<li>
 * 		<strong>Calculate current equivalence classes if needed</strong>:
 * 		<p>Compact previous {@link Instance}s into {@link EquivalenceClass}es if
 * 			needed(new objects/instances excluded).
 * 	</li>
 * 	<li>
 * 		<strong>Incremental update proceeding controller</strong>:
 * 		<p>To control the proceeding of updates for incremental object/instance.
 * 		<p><code>IncrementalUpdatingProcedureContainer</code>
 * 	</li>
 * </ul>
 * <p>
 * <strong>Extra parameters</strong> besides standard parameters(e.g. attributes, etc.).
 * <ul>
 * 	<li><strong>equClasses</strong>: {@link EquivalenceClass} {@link Map}
 * 			<p>equivalence classes of the previous {@link Instance}s, if not provided
 * 				(or <code>null </code> provided) ProcedureComponent "Calculate current
 * 				equivalence classes if needed" will
 * 				proceed to calculate.
 * 	</li>
 * 	<li><strong>incrementalASEResult</strong>: {@link ASSResult4Incremental}
 * 			<p>An {@link ASSResult4Incremental} instance with previous result generated by
 * 				Sample Pair based Incremental Attribute Reduction.
 * 			<p><strong>If the previous result is Static</strong>, please
 * 				set <code>null</code>(the procedure will initiate automatically if it is
 * 				<code>null</code>).
 * 	</li>
 * </ul>
 * The following parameters are required to be set in {@link ProcedureParameters}:
 * <ul>
 *  <li>{@link ParameterConstants#PARAMETER_UNIVERSE_INSTANCES}</li>
 *  <li>{@link ParameterConstants#PARAMETER_PREVIOUS_COLLECTION_ITEM}</li>
 * 	<li>{@link ParameterConstants#PARAMETER_ATTRIBUTES}</li>
 * 	<li>{@link ParameterConstants#PARAMETER_PREVIOUS_REDUCT}</li>
 * 	<li>{@link ParameterConstants#PARAMETER_SIG_CALCULATION_CLASS}</li>
 * 	<li>{@link ParameterConstants#PARAMETER_SIG_DEVIATION}</li>
 *  <li>{@link ParameterConstants#PARAMETER_ASE_SAMPLE_PAIR_SELECTION}</li>
 * </ul>
 * <p>
 * <strong>Notice</strong>: Please use {@link ArrayList} to contain {@link Instance}s as
 * <strong>{@link ParameterConstants#PARAMETER_PREVIOUS_COLLECTION_ITEM}.</strong>
 * 
 * @see IncrementalUpdatingProcedureContainer
 * 
 * @author Benjamin_L
 */
@Slf4j
@RoughSet
@ThreadSafetyNotSecured
public class ActiveSampleSelectionBasedAttributeReductionHeuristicQRTester 
	extends DefaultProcedureContainer<ASSResult4Incremental>
	implements TimeSum,
				ReportMapGenerated<String, Map<String, Object>>,
				HashSearchStrategy,
				StatisticsCalculated,
				ActiveSamplePairSelectionStrategy,
				QuickReductHeuristicReductStrategy
{
	private boolean logOn;
	@Getter private Statistics statistics;
	@Getter private Map<String, Map<String, Object>> report;
	
	public ActiveSampleSelectionBasedAttributeReductionHeuristicQRTester(
			ProcedureParameters paramaters, boolean logOn
	) {
		super(logOn? log: null, paramaters);
		this.logOn = logOn;
		
		statistics = new Statistics();
		report = new HashMap<>();
	}
	
	@Override
	public String shortName() {
		return "QR-Inc.-ASS"+
				"("+ ProcedureUtils.ShortName.byCore(getParameters())+")"+
				"("+ ProcedureUtils.ShortName.calculation(getParameters())+")";
	}
	
	@Override
	public String staticsName() {
		return shortName();
	}

	@Override
	public String reportName() {
		return shortName();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ProcedureComponent<?>[] initComponents() {
		return new ProcedureComponent<?>[] {
			// 1. Calculate current equivalence classes if needed
			new TimeCountedProcedureComponent<Map<IntArrayKey, EquivalenceClass>>(
					ComponentTags.TAG_COMPACT,
					this.getParameters(), 
					(component) -> {
						if (logOn){
							log.info("1. "+component.getDescription());
						}
						component.setLocalParameters(new Object[] {
								getParameters().get(ParameterConstants.PARAMETER_PREVIOUS_COLLECTION_ITEM),
								getParameters().get(ParameterConstants.PARAMETER_ATTRIBUTES),
						});
					}, 
					false,
					(component, parameters) -> {
						/* ------------------------------------------------------------------------------ */
						int p=0;
						Collection<Instance> instances =
								(Collection<Instance>) parameters[p++];
						int[] attributes =
								(int[]) parameters[p++];
						/* ------------------------------------------------------------------------------ */
						TimerUtils.timeStart((TimeCounted) component);
						/* ------------------------------------------------------------------------------ */
						// Calculate U/P, where U is the previous Universe.
						return ActiveSampleSelectionAlgorithm
								.Basic
								.equivalenceClasses(
										instances,
										new IntegerArrayIterator(attributes)
								);
					}, 
					(component, equClasses) -> {
						/* ------------------------------------------------------------------------------ */
						getParameters().setNonRoot("equClasses", equClasses);
						/* ------------------------------------------------------------------------------ */
						// Statistics
						//	[STATISTIC_BASIC_UNIVERSE_INFO_BUILDER]
						Collection<Instance> previousInstances = getParameters().get(ParameterConstants.PARAMETER_PREVIOUS_COLLECTION_ITEM);
						Collection<Instance> Instances = getParameters().get(ParameterConstants.PARAMETER_UNIVERSE_INSTANCES);
						getParameters().setNonRoot(
							StatisticsConstants.Procedure.STATISTIC_BASIC_UNIVERSE_INFO_BUILDER,
							BasicExecutionInstanceInfo.Builder.newBuilder()
								.loadCurrentInfo(Instances, false)
								.setPreviousInstanceNumber(previousInstances.size())
								.setCompressedInstanceNumber(equClasses.size())
						);
						/* ------------------------------------------------------------------------------ */
						// Report
						/* ------------------------------------------------------------------------------ */
					}
				) {
					@Override public void init() {}
								
					@Override public String staticsName() {
						return shortName()+" | 1. of "+getComponents().size()+"."+" "+getDescription();
					}
				}.setDescription("Calculate current equivalence classes if needed"),
			// 2. Incremental update proceeding controller
			new ProcedureComponent<ASSResult4Incremental>(
				ComponentTags.TAG_SIG,
				this.getParameters(), 
				(component) -> {
					if (logOn){
						log.info("2. "+component.getDescription());
					}
				}, 
				(component, parameters) -> {
					/* ------------------------------------------------------------------------------ */
					ActiveSampleSelectionResult<?> previousResult =
							getParameters().get(ParameterConstants.PARAMETER_ASE_SAMPLE_PAIR_SELECTION);
					Class<? extends Calculation<?>> calculationClass =
							getParameters().get(ParameterConstants.PARAMETER_SIG_CALCULATION_CLASS);
					/* ------------------------------------------------------------------------------ */
					if (previousResult!=null) {
						getParameters().setNonRoot(ParameterConstants.PARAMETER_PREVIOUS_REDUCT, previousResult.getReduct());
					}
					if (getParameters().get(ParameterConstants.PARAMETER_SIG_CALCULATION_INSTANCE)==null) {
						getParameters().setNonRoot(ParameterConstants.PARAMETER_SIG_CALCULATION_INSTANCE, calculationClass.newInstance());
					}
					/* ------------------------------------------------------------------------------ */
					ASSResult4Incremental incrementalASEResult = 
						(ASSResult4Incremental)
						CollectionUtils.firstOf(component.getSubProcedureContainers().values())
										.exec();
					return incrementalASEResult;
				}, 
				(component, result) -> {
					/* ------------------------------------------------------------------------------ */
					// Statistics
					//	[STATISTIC_RED_AFTER_INSPECT]
					statistics.put(StatisticsConstants.Procedure.STATISTIC_RED_AFTER_INSPECT, result.getReduct());
					/* ------------------------------------------------------------------------------ */
					// Report
					/* ------------------------------------------------------------------------------ */
				}
			) {
				@Override public void init() {}
							
				@Override public String staticsName() {
					return shortName()+" | 2. of "+getComponents().size()+"."+" "+getDescription();
				}
			}.setDescription("Incremental update proceeding controller")
			.setSubProcedureContainer(
				"IncrementalUpdatingProcedureContainer", 
				new IncrementalUpdatingProcedureContainer<>(getParameters(), logOn)
			),
		};
	}

	public long getTime() {
		return getComponents().stream()
					.map(comp->ProcedureUtils.Time.sumProcedureComponentTimes(comp))
					.reduce(Long::sum).orElse(0L);
	}

	@Override
	public Map<String, Long> getTimeDetailByTags() {
		return ProcedureUtils.Time.sumProcedureComponentsTimesByTags(this);
	}

	@Override
	public String[] getReportMapKeyOrder() {
		return getComponents().stream().map(ProcedureComponent::getDescription).toArray(String[]::new);
	}
}